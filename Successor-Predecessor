//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <math.h>

using namespace std;

struct node
{
    int data;
    node *left, *right;
}*root=NULL;

void insert(int d)
{
    node *p=new node();
    p->data=d;
    p->left=NULL;
    p->right=NULL;
    if(root==NULL)
        root=p;
    else
    {
        node *temp=root;
        node *parent=new node();
        while (temp!=NULL)
        {
            parent=temp;
            if(d<parent->data)
                temp=temp->left;
            else
                temp=temp->right;
        }
        if(d<parent->data)
            parent->left=p;
        else
            parent->right=p;
    }
}

void inorder(node *p)
{
    if(p==NULL)
        return;
    inorder(p->left);
    cout<<p->data<<" ";
    inorder(p->right);
}

void preorder(node *p)
{
    if(p==NULL)
        return;
    cout<<p->data<<" ";
    preorder(p->left);
    preorder(p->right);
}

int height(node *p)
{
    if(p==NULL)
        return 0;
    return 1 + max(height(p->left), height(p->right));
}

int treeSize(node *p)
{
    if(p==NULL)
        return 0;
    return  1+treeSize(p->left) + treeSize(p->right);
}

     
node * lookUp(node *p, int k)
{
    if(p==NULL)
        return NULL;
    if(p->data==k)
        return p;
    else
    {
        if(k<p->data)
            return lookUp(p->left, k);
        else
            return lookUp(p->right, k);
    }
}


node *minTree(node *p)
{
    if(p==NULL)
        return NULL;
    while (p->left)
    {
        p=p->left;
    }
    return p;
}


node *maxTree(node *p)
{
    if(p==NULL)
        return NULL;
    while (p->right)
    {
        p=p->right;
    }
    return p;
}

node *successor(node *p, int k)
{
    node *n=lookUp(p, k);
    if(n->right!=NULL)
        return minTree(n->right);
    node *succ=new node();
    while (p!=NULL)
    {
        if(n->data<p->data)
        {
            succ=p;
            p=p->left;
        }
        else if(n->data>p->data)
            p=p->right;
        else
            break;
    }
    return succ;
}

node *predecessor(node *p, int k)
{
    node *n=lookUp(p, k);
    if(n->left!=NULL)
        return maxTree(n->left);
    node *pred=new node();
    while (p!=NULL)
    {
        if(n->data<p->data)
        {
            p=p->left;
        }
        else if(n->data>p->data)
        {
            pred=p;
            p=p->right;
        }
        else
            break;
    }
    return pred;
}

int main(int argc, const char * argv[])
{
    int ele,n,i,a,b;
    cin>>n;
    for (i=0; i<n ; i++)
    {
        cin>>ele;
        insert(ele);
    }
    cout<<"\nInorder: ";
    inorder(root);
    cout<<endl;
   
    cin>>ele;
    cout<<"\nSuccessor: "<<successor(root, ele)->data;
    cout<<"\nPredecessor: "<<predecessor(root, ele)->data;
    return 0;
}
