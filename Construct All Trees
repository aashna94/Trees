//
//  main.cpp
//  oky
//
//  Created by aashna on 20/06/17.
//  Copyright Â© 2017 q. All rights reserved.
//

#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <climits>
#include <stdio.h>
#include <string.h>
#include <cassert>
#include <algorithm>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <math.h>

using namespace std;

struct node
{
    int data;
    node *left, *right;
}*root=NULL;

void insert(int d)
{
    node *p=new node();
    p->data=d;
    p->left=NULL;
    p->right=NULL;
    if(root==NULL)
        root=p;
    else
    {
        node *temp=root;
        node *parent=new node();
        while (temp!=NULL)
        {
            parent=temp;
            if(d<parent->data)
                temp=temp->left;
            else
                temp=temp->right;
        }
        if(d<parent->data)
            parent->left=p;
        else
            parent->right=p;
    }
}

void inorder(node *p)
{
    if(p==NULL)
        return;
    inorder(p->left);
    cout<<p->data<<" ";
    inorder(p->right);
}

void preorder(node *p)
{
    if(p==NULL)
        return;
    cout<<p->data<<" ";
    preorder(p->left);
    preorder(p->right);
}

node * create(int d)
{
    node *temp=new node();
    temp->data=d;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
}

vector<node *> constructTrees(int start, int end)
{
    vector<node *> list;
    int i,j,k;
    if(start>end)
    {
        list.push_back(NULL);
        return list;
    }
    for (i=start; i<=end; i++)
    {
        vector<node *> leftSubtree=constructTrees(start, i-1);
        vector<node *> rightSubtree=constructTrees(i+1, end);
        for (j=0; j<leftSubtree.size(); j++)
        {
            node *l=leftSubtree[j];
            for (k=0; k<rightSubtree.size(); k++)
            {
                node *r=rightSubtree[k];
                node *n=create(i);
                n->left=l;
                n->right=r;
                list.push_back(n);
            }
        }
    }
    return list;
}


int main(int argc, const char * argv[])
{
    int ele,n,i;
    cin>>n;
    for (i=0; i<n ; i++)
    {
        cin>>ele;
        insert(ele);
    }
    cout<<"\nInorder: ";
    inorder(root);
    cout<<endl;
    vector<node *> totalTrees=constructTrees(1, 3);
    for (i=0; i<totalTrees.size(); i++)
    {
        preorder(totalTrees[i]);
        cout<<endl;
    }
    return 0;
}
